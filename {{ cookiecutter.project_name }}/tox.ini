{{- '[flake8]\nmax-line-length = {{ cookiecutter.max_line_length }}' if "flake8" in cookiecutter.linter else '' -}}

[tox]
envlist =
  {% if cookiecutter.formatter != "none" -%}
    format
  {%- endif -%}
  {%- if cookiecutter.linter != "none" -%}
    , lint
  {%- endif -%}
  {%- if cookiecutter.testing != "none" -%}
    {%- if cookiecutter.formatter|lower != "none" -%}
      , formattest
    {%- endif -%}
    {%- if cookiecutter.linter|lower != "none" -%}
      , linttest
    {%- endif -%}
      , unit, integration
    {%- if "behave" in cookiecutter.testing -%}
      , behave
    {%- endif -%}
  {%- endif -%}
  {%- if "sphinx" in cookiecutter.docs|lower() -%}
    , docs
  {%- endif %}
skipsdist = True
skip_install = True

[testenv]
skip_install = true
whitelist_externals = poetry
                      {{ 'autopep8' if "autopep8" in cookiecutter.formatter else '' -}}
                      {{ 'black' if "black" in cookiecutter.formatter else '' -}}
                      {{ 'pep8' if "pep8" in cookiecutter.linter else '' -}}
                      {{ 'pylint' if "pylint" in cookiecutter.linter else '' -}}
                      {{ 'flake8' if "flake8" in cookiecutter.linter else '' -}}
                      {{ 'mypy' if "mypy" in cookiecutter.linter else '' -}}
                      {{ 'mypy' if "mypy" in cookiecutter.linter else '' }}
envdir = {toxinidir}/.venv
basepython = python{{ cookiecutter.python_version }}


[testenv:venv]
recreate = False
description = "Install basic dependencies for working application, without running tests"
deps = pip==19.0.3{# pip 19.1 (2019-04-23) breaks editable installs with pyproject.toml #}
commands =
  poetry install -vvv
commands_post =
  pip install --upgrade pip==19.0.3{# pip 19.1 (2019-04-23) breaks editable installs with pyproject.toml #}

{%- if cookiecutter.formatter != "none" -%}
{{ "\n\n\n[testenv:format]" }}
description = "Reformat code using {{ cookiecutter.formatter }} formatter(s)"
commands =
  {{ 'autopep8 --in-place --recursive {{ cookiecutter.slug_name }}' if "autopep8" in cookiecutter.formatter else '' -}}
  {{ 'black --py36 {{ cookiecutter.slug_name }}' if "black" in cookiecutter.formatter else '' }}
{%- endif %}

{%- if cookiecutter.linter != "none" -%}
{{ "\n\n\n[testenv:lint]" }}
description = "Lint code using {{ cookiecutter.linter }} linter(s)"
commands =
  {{ 'flake8 --diff --show-source --statistics --count {{ cookiecutter.slug_name }}' if "flake8" in cookiecutter.linter else '' -}}
  {{ 'pylint {{ cookiecutter.slug_name }}' if "pylint" in cookiecutter.linter else '' -}}
  {{ 'mypy --python-version {{ cookiecutter.python_version }} -p {{ cookiecutter.slug_name }' if "mypy" in cookiecutter.linter else '' -}}
  {{ 'v' if "banit" in cookiecutter.linter else '' }}
{%- endif -%}


{%- if cookiecutter.testing|lower != "none" -%}

{%- if cookiecutter.formatter|lower != "none" -%}
{{ "\n\n\n[testenv:formattest]"}}
description = "Reformat testing code using {{ cookiecutter.formatter }} formatter(s)"
commands =
  {{ 'autopep8 --in-place --recursive tests' if "autopep8" in cookiecutter.formatter else '' -}}
  {{ 'black --py36 tests' if "black" in cookiecutter.formatter else '' -}}
{%- endif -%}

{%- if cookiecutter.linter|lower != "none" -%}
{{ "\n\n\n[testenv:linttest]"}}
description = "Lint test code using {{ cookiecutter.linter }} linter(s)"
commands =
  {{ 'flake8 --diff --show-source --statistics --count tests' if "flake8" in cookiecutter.formatter else '' -}}
  {{ 'pylint tests' if "pylint" in cookiecutter.formatter else '' -}}
  {{ 'mypy --python-version {{ cookiecutter.python_version }} -p tests' if "mypy" in cookiecutter.formatter else '' -}}
  {{ 'bandit -r tests' if "bandit" in cookiecutter.formatter else '' }}

{%- endif %}


[testenv:unit]
description = "Run unit tests"
commands =
  pytest {posargs} -v --tb=short -ra --cov={{ cookiecutter.slug_name }} tests/unit
  coverage xml -o coverage.unit.xml


[testenv:integration]
description = "Run integration tests"
commands =
  {{ 'docker-compose up -d' if "docker-compose" in cookiecutter.docker else '' -}}
  pytest {posargs} -v --tb=short -ra --cov={{ cookiecutter.slug_name }} tests/integration
  coverage xml -o coverage.integration.xml
  {{ 'docker-compose down' if "docker-compose" in cookiecutter.docker else '' -}}


{%- if "behave" in cookiecutter.testing -%}
{{ "\n\n\n[testenv:behave]" }}
description = "Run behavioral tests"
commands =
  {{ 'docker-compose up -d' if "docker-compose" in cookiecutter.docker else '' -}}
  behave --show-timings tests/features
  {{ 'docker-compose down' if "docker-compose" in cookiecutter.docker else '' -}}
{%- endif -%}

{%- endif -%}

{%- if "sphinx" in cookiecutter.docs -%}
{{ "\n\n\n[testenv:docs]"}}
description = "Invoke sphinx-build to build the HTML docs"
commands =
  sphinx-build \
  -d "{toxinidir}/docs/build/.doctrees" \
  "{toxinidir}/docs/source" \
  "{toxinidir}/docs/build" \
  --color \
  -E \
  -a \
;  -W \
  -bhtml
{%- endif %}
