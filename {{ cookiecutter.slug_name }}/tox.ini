{% macro tox_section(section_title, condition, section_content) -%}
{%- if condition -%}
################################# {{ section_title }} #################################
{{ section_content }}
{%- endif -%}

{{- "\n\n" -}}
{{- '' -}}
{%- endmacro %}

{{ tox_section('Flake 8', "flake8" in cookiecutter.linter, "
[flake8]
max-line-length = {}
ignore =
  # line too long handled by pylint
  E501,
  # unused import handled by pylint
  F401,
  # singleton-comparison handled by pylint
  E712,
  # w503 incompatible with pep8
  W503
show_source = true
statistics = true
exclude =
  .git,
  logs,
  dist,
  .vscode,
  .venv,
  .tox,
  pip-wheel-metadata,
  .mypy-cache,
  .hypothesis,
  **/__pycache__,
  docs/source/conf.py,
  **/*.bkp
  petri.egg-info,
  data
# autopep8
in-place = true
recursive = true
".format(cookiecutter.max_line_length)) }}

{%- if "mypy" in cookiecutter.linter -%}
######################################## mypy ##########################################
[mypy]
ignore_missing_imports = True
python_version = {{ cookiecutter.python_version }}
{%- endif -%}

{{- "\n\n" -}}
{{- '' -}}

{%- if "bandit" in cookiecutter.linter -%}
####################################### bandit #########################################
[bandit]
{%- endif -%}

{{- "\n\n" -}}
{{- '' -}}

{%- if "pylint" in cookiecutter.linter -%}
######################################## pylint ########################################
[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=pydantic
[MESSAGES CONTROL]
disable =
  # black takes care of C0330. See: https://github.com/python/black/issues/48
  C0330,
  # R0801 does not like imports in init
  R0801
todo = remove

[FORMAT]
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=\s*(# )?<?https?://\S+>?
indent-string = "    "
good-names =
  db,


[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
# All of these will error the testenv. To check exhaustively, run the `TODO` testenv.
notes=FIXME,TODO
{%- endif -%}

{{- "\n\n" -}}
{{- '' -}}

################################# tox-specific ################################
[tox]
envlist =
  {% if cookiecutter.formatter != "none" -%}
    format
  {%- endif -%}
  {%- if cookiecutter.linter != "none" -%}
    , lint
  {%- endif -%}
  {%- if cookiecutter.testing != "none" -%}
    {%- if cookiecutter.formatter|lower != "none" -%}
      , formattest
    {%- endif -%}
    {%- if cookiecutter.linter|lower != "none" -%}
      , linttest
    {%- endif -%}
      , unit, integration, coverage
    {%- if "behave" in cookiecutter.testing -%}
      , behave
    {%- endif -%}
  {%- endif -%}
  {%- if "sphinx" in cookiecutter.docs|lower() -%}
    , srcdocs, testdocs, builddocs
  {%- endif %}
skipsdist = True
skip_install = True

[testenv]
skip_install = true
whitelist_externals = poetry
                      python
{{ '                      autopep8' if "autopep8" in cookiecutter.formatter else '' -}}
{{ '\n                      black' if "black" in cookiecutter.formatter else '' -}}
{{ '\n                      pep8' if "pep8" in cookiecutter.linter else '' -}}
{{ '\n                      pylint' if "pylint" in cookiecutter.linter else '' -}}
{{ '\n                      flake8' if "flake8" in cookiecutter.linter else '' -}}
{{ '\n                      mypy' if "mypy" in cookiecutter.linter else '' -}}
{{ '\n                      bandit' if "bandit" in cookiecutter.linter else '' -}}
{{ '\n                      sphinx-build' if "sphinx" in cookiecutter.docs else '' }}
envdir = {toxinidir}/.venv
basepython = python{{ cookiecutter.python_version }}
list_dependencies_command = python -c "print('-o-')"{# remove pip freeze ugly output #}
deps =
  pip<=19.1.3,>=19.1.1{# pip 19.1 (2019-04-23) breaks editable installs with pyproject.toml #}
commands =
  poetry install -vvv

[testenv:venv]
recreate = False
description = "Install basic dependencies for working application, without running tests"

{%- if cookiecutter.formatter != "none" -%}
{{ "\n\n\n[testenv:format]" }}
description = "Reformat code using {{ cookiecutter.formatter }} formatter(s)"
commands =
{{ '  autopep8 --in-place --recursive '+cookiecutter.slug_name if "autopep8" in cookiecutter.formatter else '' -}}
{{ '\n  black -q --target-version py36 '+cookiecutter.slug_name if "black" in cookiecutter.formatter else '' }}
{%- endif %}

{%- if cookiecutter.linter != "none" -%}
{{ "\n\n\n[testenv:lint]" }}
description = "Lint code using {{ cookiecutter.linter }} linter(s)"
commands =
{{ '  flake8 --show-source --statistics --count '+cookiecutter.slug_name if "flake8" in cookiecutter.linter else '' -}}
{{- '\n  pylint --rcfile={toxinidir}/tox.ini '+cookiecutter.slug_name if "pylint" in cookiecutter.linter else '' -}}
{{- '\n  mypy --config-file {toxinidir}/tox.ini --python-version '+cookiecutter.python_version+' -p '+cookiecutter.slug_name if "mypy" in cookiecutter.linter else '' -}}
  {{ '\n  bandit -q -r '+cookiecutter.slug_name if "bandit" in cookiecutter.linter else '' }}
{%- endif -%}


{%- if cookiecutter.testing|lower != "none" -%}

{%- if cookiecutter.formatter|lower != "none" -%}
{{ "\n\n\n[testenv:formattest]"}}
description = "Reformat testing code using {{ cookiecutter.formatter }} formatter(s)"
commands =
{{ '  autopep8 --in-place --recursive tests' if "autopep8" in cookiecutter.formatter else '' -}}
{{ '\n  black -q --target-version py36 tests' if "black" in cookiecutter.formatter else '' -}}
{%- endif -%}

{%- if cookiecutter.linter|lower != "none" -%}
{{ "\n\n\n[testenv:linttest]"}}
description = "Lint test code using {{ cookiecutter.linter }} linter(s)"
commands =
{{ '  flake8 --show-source --statistics --count tests' if "flake8" in cookiecutter.linter else '' -}}
{{ '\n  pylint --rcfile={toxinidir}/tox.ini --disable=C0111 tests' if "pylint" in cookiecutter.linter else '' -}}
{{ '\n  mypy --config-file {toxinidir}/tox.ini --python-version '+cookiecutter.python_version+' -p tests' if "mypy" in cookiecutter.linter else '' -}}
{{ '\n    bandit -q --ini {toxinidir}/tox.ini skips=B101 -r tests' if "bandit" in cookiecutter.linter else '' }}

{%- endif %}


[testenv:unit]
description = "Run unit tests"
setenv =
    COVERAGE_FILE = .coverage.unit
commands =
  pytest {posargs} -v --tb=short -ra --cov={{ cookiecutter.slug_name }} tests/unit


[testenv:integration]
description = "Run integration tests"
setenv =
  COVERAGE_FILE = .coverage.integration
commands =
{{- '\n  docker-compose up -d\n  ' if "docker-compose" in cookiecutter.docker else '\n  ' -}}
  pytest {posargs} -v --tb=short -ra --cov={{ cookiecutter.slug_name }} tests/integration
{{- '\n  docker-compose down' if "docker-compose" in cookiecutter.docker else '' -}}


{%- if "behave" in cookiecutter.testing -%}
{{ "\n\n\n[testenv:behave]" }}
description = "Run behavioral tests"
commands =
{%- if "behave" in cookiecutter.testing %}
  docker-compose up -d
{%- endif %}
  behave --show-timings tests/features
{%- if "behave" in cookiecutter.testing %}
  docker-compose down
{%- endif %}
{%- endif -%}
{{ "\n\n" }}
[testenv:coverage]
description = "Report Coverage results by aggregating tests results"
commands =
  coverage combine -a .coverage.unit .coverage.integration
  coverage html -d docs/build/coverage
{%- endif -%}{# cookiecutter.testing|lower != "none" #}

{%- if "sphinx" in cookiecutter.docs -%}
{{ "\n\n\n[testenv:srcdocs]"}}
description = "Invoke sphinx-apidoc to template the rst sources"
commands =
  sphinx-apidoc \
    --force \
    --ext-autodoc \
    --ext-doctest \
    --ext-intersphinx \
    --ext-todo \
    --ext-coverage \
    --ext-imgmath \
    --ext-mathjax \
    --ext-ifconfig \
    --ext-viewcode \
    --ext-githubpages \
    -e \
    -M \
    -o "{toxinidir}/docs/source/" "{toxinidir}/{{  cookiecutter.slug_name  }}"
  python -c "open('docs/source/{{  cookiecutter.slug_name  }}.rst','a').write('Coverage\n--------\n\n.. toctree::\n\nFollow this link to see Code coverage results\n`Coverage <coverage/index.html>`_.\n')"

[testenv:testdocs]
description = "Invoke doc8 to check the rst docs"
commands =
  doc8 -q "{toxinidir}/docs"


[testenv:builddocs]
description = "Invoke sphinx-build to build the HTML docs"
commands =
  sphinx-build \
    -q \
    -d "{toxinidir}/docs/build/.doctrees" \
    --color \
    -E \
    -a \
    -bhtml \
    "{toxinidir}/docs/source" \
    "{toxinidir}/docs/build"
{%- endif %}
