
{%- macro ini_section(title, condition, content) -%}
  {%- if condition and content|trim() -%}
    [{{- title -}}]
    {%- for key,value in content.items() -%}
      {%- if value -%}
        {{- '\n' -}}
        {%- if value =="__COMMENT__"-%}
          {{- key -}}
        {%- else -%}
          {{- key + " = " + value -}}
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}

    {{- "\n\n" -}}
    {{- '' -}}

  {%- endif -%}
{%- endmacro -%}

{%- macro ifelse(condition, content_true, content_false) -%}
  {%- if condition and content_true -%}
    {{- content_true -}}
  {%- else -%}
    {%- if (not condition) and content_false -%}
      {{- content_false -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}

{%- macro maybe(condition, content) -%}
  {%- if condition and content -%}
    {{- content -}}
  {%- endif -%}
{%- endmacro -%}

{%- macro multiline_list(data, indent=2, st_newline=True, st_idt=True, comma='') -%}
  {% set not_empty_data = [] %}
  {%- for element in data -%}
    {%- if element -%}
      {{- not_empty_data.append(element) or ''-}}
    {%- endif -%}
  {%- endfor -%}
  
  {%- if st_newline -%}
    {{- "\n" -}}
  {%- endif -%}
  {%- if st_idt -%}
    {{- " "*indent -}}
  {%- endif -%}

  {{- (comma + '\n'+' '*indent).join(not_empty_data) -}}
  
{%- endmacro -%}

{%- macro inline_list(data, spacing=0) -%}
  {% set not_empty_data = [] %}
  {%- for element in data -%}
    {%- if element -%}
      {{- not_empty_data.append(element) or ''-}}
    {%- endif -%}
  {%- endfor -%}

  {{- (','+' '*spacing).join(not_empty_data) -}}
{%- endmacro -%}

{%- macro multiline_command(data, indent=2, st_newline=True, st_idt=True, quotes='"') -%}
  {% set not_empty_data = [] %}
  {%- for element in data -%}
    {%- if element -%}
      {{- not_empty_data.append(element) or ''-}}
    {%- endif -%}
  {%- endfor -%}
  
  {%- if st_newline -%}
    {{- "\n" -}}
  {%- endif -%}
  {%- if st_idt -%}
    {{- " "*indent -}}
  {%- endif -%}

  {{- not_empty_data[0] -}}
  {{- " \\\n"+' '*(indent+2) -}}
  {%- if quotes -%}
    {{- quotes -}}
  {%- endif -%}
  {{- (' \\\n'+' '*(indent+2)).join(not_empty_data[1:]) -}}
  {%- if quotes -%}
  {{- ' \\\n'+' '*(indent+2) -}}
    {{- quotes -}}
  {%- endif -%}
  
{%- endmacro -%}

{% macro tox_section(section_title, condition, section_content) -%}
{%- if condition -%}
"################################# {} #################################".format(section_title)
{{- section_content -}}
{%- endif -%}

{{- "\n\n" -}}
{{- '' -}}
{%- endmacro -%}

{{- ini_section(
    'flake8',
    "flake8" in cookiecutter.linter,
    {
      "max-line-length": cookiecutter.max_line_length,
      "ignore": multiline_list(
        [
          "# line too long handled by pylint",
          "E501",
          "# unused import handled by pylint",
          "F401",
          "# singleton-comparison handled by pylint",
          "E712",
          "# W503 incompatible with pep8",
          "W503",
        ],
        indent=2
      ),
      "statistics": "true",
      "show_source": "true",
      "exclude": multiline_list(
        [
          ".git",
          "logs",
          "dist",
          ".vscode",
          ".venv",
          ".tox",
          "pip-wheel-metadata",
          ".mypy-cache",
          ".hypothesis",
          "**/__pycache__",
          "docs/source/conf.py",
          "**/*.bkp",
          "petri.egg-info",
          "data"
        ],
        indent=2
      ),
      "# autopep8": "__COMMENT__",
      "in-place": "true",
      "recursive": "true",
    }
)
-}}

{{- ini_section(
      'mypy',
      "mypy" in cookiecutter.linter,
      {
        "ignore_missing_imports": "true",
        "python_version": cookiecutter.python_version,
      }
    )
-}}

{{- ini_section(
      'behave',
      "behave" in cookiecutter.testing,
      {
        "color": "True",
        "junit": "True",
        "junit_directory": "data/reports",
        "paths": "tests/features",
        "show_timings": "false",
        "summary": "true",
        "quiet": "true",
        "show_snippets": "true",
        "expand": "false",
        "lang": "en",
        "default_format": "progress",
      }
    )
-}}

{{- ini_section(
      'bandit',
      "bandit" in cookiecutter.testing,
      {
        "skips": inline_list(["B101",])
      }
    )
-}}

{{- ini_section(
      'MASTER',
      "pylint" in cookiecutter.linter,
      {
        "extension-pkg-whitelist": "pydantic",
      }
    )
-}}

{{- ini_section(
      'MESSAGES CONTROL',
      "pylint" in cookiecutter.linter,
      {
        "disable": multiline_list(
          [
            "# black takes care of C0330. See: https://github.com/python/black/issues/48",
            "C0330",
            "# R0801 does not like imports in init",
            "R0801",
          ], comma=','
        ),
      }
    )
-}}

{{- ini_section(
      'FORMAT',
      "pylint" in cookiecutter.linter,
      {
        "ignore-long-lines": '\s*(# )?<?https?://\S+>?',
        "indent-string": '"    "',
        "good-names": multiline_list(
          [
            "db",
          ]
        ),
      }
    )
-}}


{{- ini_section(
      'MISCELLANEOUS',
      "pylint" in cookiecutter.linter,
      {
        "notes": multiline_list([
          "FIXME",
          "TODO",
          "; TODO",
          "; BUG",
          "; NOBUG",
          "; REQ",
          "; RFE",
          "; IDEA",
          "; WTF",
          "; ALERT",
          "; HACK",
          "; PORT",
          "; CAVEAT",
          "; NOTE",
          "; REF",
          "; TODOC",
          "; CRED",
        ]),
      }
    )
-}}

{{- ini_section(
      'tox',
      true,
      {
        "envlist": multiline_list(
          [
            maybe(cookiecutter.formatter != "none", "format"),
            maybe(cookiecutter.linter != "none", "lint"),
            maybe("pylint" in cookiecutter.linter, "TODO"),
            maybe(
              cookiecutter.testing != "none", 
              multiline_list(
                [
                  maybe(cookiecutter.formatter|lower != "none", "formattest"),
                  maybe(cookiecutter.linter|lower != "none", "linttest"),
                  "unit",
                  "integration",
                  maybe("behave" in cookiecutter.testing, "behave"),
                  "coverage",
                ],
                st_newline=False,
                st_idt=False,
              )
            ),
            "builddocs",
            "testdocs",
          ],
        ),
      "skipsdist": "true",
      "skip_install": "true",
      }
    )
-}}

{{- ini_section(
      'testenv',
      true,
      {
        "skip_install": "true",
        "whitelist_externals": multiline_list(
          [
            "poetry",
            "python",
            maybe("autopep8" in cookiecutter.formatter, "autopep8"),
            maybe("black" in cookiecutter.formatter, "black"),
            maybe("pylint" in cookiecutter.linter, "pylint"),
            maybe("flake8" in cookiecutter.linter, "flake8"),
            maybe("mypy" in cookiecutter.linter, "mypy"),
            maybe("bandit" in cookiecutter.linter, "bandit"),
            maybe("sphinx" in cookiecutter.docs, "sphinx-build"),
            maybe("docker" in cookiecutter.docker, "docker"),
            maybe("docker-compose" in cookiecutter.docker, "docker-compose"),
          ],
          indent=22,
          st_newline=False, 
          st_idt=False,
        ),
        "envdir": "{toxinidir}/.venv",
        "basepython": "python{}".format(cookiecutter.python_version),
        "# remove pip freeze ugly output": "__COMMENT__",
        "list_dependencies_command": 'python -c "print({})"'.format("' -------------- O -------------- '"),
        "deps": multiline_list(
          [
            "# pip 19.1 (2019-04-23) breaks editable installs with pyproject.toml, should be pip<=19.1.3,>=19.1.1",
            "pip>=19.1.1",
          ]
        ),
        "commands": multiline_list(
          [
            multiline_command([
              "python -c",
              "from pathlib import Path ;",
              "from shutil import rmtree ;",
              "rmtree(Path('pip-wheel-metadata'), ignore_errors=True) ;",
              "rmtree(Path('catalogo_db.egg-info'), ignore_errors=True) ;",
            ], st_newline=False, st_idt=False),
            "poetry install -vvv",
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:venv',
      true,
      {
        "recreate": "false",
        "description": '"Install basic dependencies for developing application, without running tests"',
      }
    )
-}}

{{- ini_section(
      'testenv:format',
      cookiecutter.formatter != "none",
      {
        "description": '"Reformat code using {} formatter(s)"'.format(cookiecutter.formatter),
        "commands": multiline_list(
          [
            maybe(
              "autopep8" in cookiecutter.formatter,
              "autopep8 --in-place --recursive {}".format(cookiecutter.slug_name)
            ),
            maybe(
              "black" in cookiecutter.formatter,
              "black -q --target-version py36 {}".format(cookiecutter.slug_name)
            ),
            maybe(
              "docformatter" in cookiecutter.formatter,
              multiline_command(
                [
                  "docformatter",
                  "--in-place",
                  "--recursive",
                  "--wrap-summaries 0",
                  "--blank",
                  cookiecutter.slug_name
                ],st_newline=False, st_idt=False, quotes=False
              )
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:flake8',
      "flake8" in cookiecutter.linter,
      {
        "description": '"Lint code using flake8"',
        "commands": multiline_list(
          [
            "flake8 --config={{toxinidir}}/tox.ini {}".format(cookiecutter.slug_name)
          ]
        )
      }
    )
-}}
{{- ini_section(
      'testenv:bandit',
      "bandit" in cookiecutter.linter,
      {
        "description": '"Lint code using bandit"',
        "commands": multiline_list(
          [
            "bandit --ini={{toxinidir}}/tox.ini --quiet --recursive {}".format(cookiecutter.slug_name)
          ]
        )
      }
    )
-}}
{{- ini_section(
      'testenv:mypy',
      "mypy" in cookiecutter.linter,
      {
        "description": '"Lint code using mypy"',
        "commands": multiline_list(
          [
            "mypy --config-file {{toxinidir}}/tox.ini --python-version {} -p {}".format(cookiecutter.python_version, cookiecutter.slug_name)
          ]
        )
      }
    )
-}}
{{- ini_section(
      'testenv:pylint',
      "pylint" in cookiecutter.linter,
      {
        "description": '"Lint code using pylint"',
        "commands": multiline_list(
          [
            "pylint --rcfile={{toxinidir}}/tox.ini {}".format(cookiecutter.slug_name)
          ]
        )
      }
    )
-}}

{{- ini_section(
      'testenv:lint',
      cookiecutter.linter != "none",
      {
        "description": '"Lint code using {} linter(s)"'.format(cookiecutter.linter),
        "commands": multiline_list(
          [
            maybe(
              "flake8" in cookiecutter.linter,
              "tox -e flake8"
            ),
            maybe(
              "bandit" in cookiecutter.linter,
              "tox -e bandit"
            ),
            maybe(
              "mypy" in cookiecutter.linter,
              "tox -e mypy"
            ),
            maybe(
              "pylint" in cookiecutter.linter,
              "tox -e pylint"
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:TODO',
      "pylint" in cookiecutter.linter,
      {
        "description": '"Install basic dependencies for developing application, without running tests"',
        "commands": multiline_command(
          [
            "- pylint",
            "--disable=all",
            "--enable=W0511",
            "notes={}".format(
              inline_list(
                [
                  "FIXME",
                  "TODO",
                  "BUG",
                  "NOBUG",
                  "REQ",
                  "RFE",
                  "IDEA",
                  "WTF",
                  "ALERT",
                  "HACK",
                  "PORT",
                  "CAVEAT",
                  "NOTE",
                  "REF",
                  "TODOC",
                  "CRED"
                ]
              )
            ),
            cookiecutter.slug_name
          ], quotes=False
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:formattest',
      (cookiecutter.formatter != "none") and (cookiecutter.testing|lower != "none"),
      {
        "description": '"Reformat testing code using {} formatter(s)"'.format(cookiecutter.formatter),
        "commands": multiline_list(
          [
            maybe(
              "autopep8" in cookiecutter.formatter,
              "autopep8 --in-place --recursive tests"
            ),
            maybe(
              "black" in cookiecutter.formatter,
              "black -q --target-version py36 tests"
            ),
          ],
          indent=2,
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:linttest',
      (cookiecutter.linter != "none") and (cookiecutter.testing|lower != "none"),
      {
        "description": '"Lint test using {} linter(s)"'.format(cookiecutter.linter),
        "commands": multiline_list(
          [
            maybe(
              "flake8" in cookiecutter.linter,
              "flake8 --config={toxinidir}/tox.ini tests"
            ),
            maybe(
              "pylint" in cookiecutter.linter,
              "pylint --rcfile={toxinidir}/tox.ini --disable=C0111 tests"
            ),
            maybe(
              "mypy" in cookiecutter.linter,
              "mypy --config-file {{toxinidir}}/tox.ini --python-version {} -p tests".format(cookiecutter.python_version)
            ),
            maybe(
              "bandit" in cookiecutter.linter,
              "bandit --ini {toxinidir}/tox.ini -s B101 --quiet --recursive tests"
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:unit',
      "pytest" in cookiecutter.testing,
      {
        "description": '"Run unit tests"',
        "setenv": multiline_list(
          [
            maybe(
              "coverage" in cookiecutter.testing,
              "COVERAGE_FILE = .coverage.unit",
            ),
          ],
          indent=4
        ),
        "commands": multiline_list(
          [
            multiline_command(
              [
                "pytest",
                "-v",
                "--tb=short",
                "-ra",
                maybe(
                  "coverage" in cookiecutter.testing,
                  "--cov={}".format(cookiecutter.slug_name)
                ),
                "{posargs}",
                "tests/unit",
              ],st_newline=False, st_idt=False, quotes=False
            )
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:integration',
      "pytest" in cookiecutter.testing,
      {
        "description": '"Run integration tests"',
        "setenv": multiline_list(
          [
            maybe(
              "coverage" in cookiecutter.testing,
              "COVERAGE_FILE = .coverage.integration",
            ),
          ],
          indent=4
        ),
        "commands": multiline_list(
          [
            maybe(
              "docker-compose" in cookiecutter.docker,
              "docker-compose up -d",
            ),
            multiline_command(
              [
                "pytest",
                "-v",
                "--tb=short",
                "-ra",
                maybe(
                  "coverage" in cookiecutter.testing,
                  "--cov={}"
                ),
                "{posargs}"
                "tests/integration",
              ],st_newline=False, st_idt=False, quotes=False
            ),
            maybe(
              "docker-compose" in cookiecutter.docker,
              "docker-compose down -v",
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:behave',
      "behave" in cookiecutter.testing,
      {
        "description": '"Run behavioral tests on user stories"',
        "setenv": multiline_list(
          [
            maybe(
              "coverage" in cookiecutter.testing,
              "COVERAGE_FILE = .coverage.behave",
            ),
          ],
          indent=4
        ),
        "commands": multiline_list(
          [
            ifelse(
              "coverage" in cookiecutter.testing,
              "coverage run -m behave",
              "behave",
            )
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:coverage',
      "coverage" in cookiecutter.testing,
      {
        "description": '"Report Coverage results by aggregating tests results"',
        "commands": multiline_list(
          [
            multiline_command([
              "- python -c",
              "from pathlib import Path ;",
              "Path('.coverage').unlink() ;",
            ],st_newline=False, st_idt=False),
            multiline_command(
              [
                "- coverage combine",
                "-a",
                ".coverage.unit",
                ".coverage.integration",
                maybe(
                  "behave" in cookiecutter.testing,
                  ".coverage.behave",
                )
              ],st_newline=False, st_idt=False, quotes=False
            ),
            maybe(
              "coverage" in cookiecutter.testing,
              "- coverage html -d docs/build/coverage",
            ),
            maybe(
              "coverage" in cookiecutter.testing,
              "- coverage xml",
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:testcode',
      "pytest" in cookiecutter.testing,
      {
        "description": '"Test code using {} test mode(s)"'.format(cookiecutter.testing),
        "commands": multiline_list(
          [
            maybe(
              "flake8" in cookiecutter.testing,
              "tox -e unit"
            ),
            maybe(
              "bandit" in cookiecutter.testing,
              "tox -e integration"
            ),
            maybe(
              "behave" in cookiecutter.testing,
              "tox -e behave"
            ),
            maybe(
              "coverage" in cookiecutter.testing,
              "tox -e coverage"
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:builddocs',
      "sphinx" in cookiecutter.docs,
      {
        "description": '"Invoke sphinx-apidoc to template the rst sources"',
        "commands": multiline_list(
          [
            multiline_command(
              [
                "python -c",
                "from pathlib import Path ;",
                "[f.unlink() for f in Path('{toxinidir}').glob('docs/source/**/*.rst')]",
              ]
            ),
            multiline_command(
              [
                "sphinx-build",
                "-Q",
                '-d "{toxinidir}/docs/build/.doctrees"',
                "--color",
                "-E",
                "-a",
                "-bhtml",
                '"{toxinidir}/docs/source"',
                '"{toxinidir}/docs/build"'
              ]
            ),
            multiline_command(
              [
                "python -c",
                "open('docs/source/{}.rst','a').write('{}')".format(
                  cookiecutter.slug_name,
                  "Coverage\\n--------\\n\\n.. toctree::\\n\\nFollow this link to see Code coverage results\\n`Coverage <coverage/index.html>`_.\\n"
                )
              ], st_idt=False, st_newline=False
            ),
            'doc8 -q "{toxinidir}/docs"',
            ,
          ], st_idt=False, st_newline=False
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:testdocs',
      true,
      {
        "description": '"Invoke doc8 to check the rst docs"',
        "commands": multiline_list(
          [
            'doc8 -q "{toxinidir}/docs"',
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:builddocs',
      true,
      {
        "description": '"Invoke sphinx-build to build the HTML docs"',
        "setenv": 'LOG_LEVEL = 50',
        "commands": multiline_list(
          [
            multiline_command(
              [
                "sphinx-build",
                '-Q',
                '-d "{toxinidir}/docs/build/.doctrees"',
                '--color',
                '-E',
                '-a',
                '-bhtml',
                '"{toxinidir}/docs/source"',
                '"{toxinidir}/docs/build"',
              ], quotes=False, st_newline=False, st_idt=False
            )
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:reqs',
      true,
      {
        "description": '"Export requiremets.txt"',
        "commands": multiline_list(
          [
            multiline_command(
              [
                "poetry export",
                "--dev",
                "--without-hashes",
                "-f",
                "requirements.txt",
              ],quotes=False,st_newline=False,st_idt=False
            ),
            multiline_command(
              [
                "python -c",
                "from pathlib import Path ;",
                "Path('requirements.txt').rename('requirements.dev.txt')",
              ],st_newline=False, st_idt=False
            ),
            multiline_command(
              [
                "poetry export",
                "--dev",
                "--without-hashes",
                "-f",
                "requirements.txt",
              ],st_newline=False, st_idt=False,quotes=False
            ),
          ],
        ),
      }
    )
-}}

{{- ini_section(
      'testenv:docker',
      cookiecutter.docker != "none",
      {
        "description": '"Build docker container(s)"',
        "changedir": '"{toxinidir}/docker"',
        "commands": multiline_list(
          [
            'bash build-all.sh',
          ],
        ),
      }
    )
-}}
