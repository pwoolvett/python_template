{%- macro ini_section(title, condition, content) -%}
  {%- if condition and content|trim() -%}
    [{{- title -}}]
    {%- for key,value in content.items() -%}
      {%- if value -%}
        {{- '\n' -}}
        {{ key + " = " + value }}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}

  {{- "\n\n" -}}
  {{- '' -}}
{%- endmacro -%}

{%- macro maybe(condition, content) -%}
  {%- if condition and content|trim() -%}
    {{- content -}}
  {%- endif -%}
{%- endmacro -%}

{%- macro multiline_list(data, indent=2) -%}
  {% for element in data -%}
      {%- if element -%}
        {{- '\n' -}}
        {{- ' '*indent -}}
        {{ element }}
      {%- endif -%}
  {% endfor %}
{%- endmacro -%}

{% macro tox_section(section_title, condition, section_content) -%}
{%- if condition -%}
"################################# {} #################################".format(section_title)
{{- section_content -}}
{%- endif -%}

{{- "\n\n" -}}
{{- '' -}}
{%- endmacro -%}

{{- ini_section(
    'flake8',
    "flake8" in cookiecutter.linter,
    {
      "max-line-length": cookiecutter.max_line_length,
      "ignore": multiline_list(
        [
          "# line too long handled by pylint",
          "E501",
          "# unused import handled by pylint"
          "F401"
          "# singleton-comparison handled by pylint"
          "E712",
          "# W503 incompatible with pep8"
          "W503"
        ],
        indent=2
      ),
      "statistics": "true",
      "show_source": "true",
      "exclude": multiline_list(
        [
          ".git",
          "logs",
          "dist",
          ".vscode",
          ".venv",
          ".tox",
          "pip-wheel-metadata",
          ".mypy-cache",
          ".hypothesis",
          "**/__pycache__",
          "docs/source/conf.py",
          "**/*.bkp",
          "petri.egg-info",
          "data"
        ],
        indent=2
      ),
      "in-place": "true",
      "recursive": "true",
    }
)
}}

{{- ini_section(
      'mypy',
      "mypy" in cookiecutter.linter,
      {
        "ignore_missing_imports": "true",
        "python_version": '"{}"'.format(cookiecutter.python_version),
      }
    )
}}

{{- ini_section(
      'MASTER',
      "pylint" in cookiecutter.linter,
      {
        "extension-pkg-whitelist": "pydantic",
      }
    )
}}

{{- ini_section(
      'MESSAGES CONTROL',
      "pylint" in cookiecutter.linter,
      {
        "disable": multiline_list(
          [
            "# black takes care of C0330. See: https://github.com/python/black/issues/48","C0330",
            "# R0801 does not like imports in init","R0801",
          ]
        ),
      }
    )
}}

{{- ini_section(
      'FORMAT',
      "pylint" in cookiecutter.linter,
      {
        "ignore-long-lines": "\s*(# )?<?https?://\S+>?",
        "indent-string": "    ",
        "good-names": multiline_list(
          [
            "db",
          ]
        ),
      }
    )
}}


{{- ini_section(
      'MISCELLANEOUS',
      "pylint" in cookiecutter.linter,
      {
        "notes": "FIXME,TODO",
      }
    )
}}

{{- ini_section(
      'tox',
      true,
      {
        "envlist": multiline_list(
          [
            maybe(cookiecutter.formatter != "none", "format"),
            maybe(cookiecutter.linter != "none", "lint"),
            maybe(
              cookiecutter.testing != "none", 
              multiline_list(
                [
                  maybe(cookiecutter.formatter|lower != "none", "formattest"),
                  maybe(cookiecutter.linter|lower != "none", "linttest"),
                  "unit",
                  "integration",
                  "coverage",
                  maybe("behave" in cookiecutter.testing, "behave"),
                ]
              )
            ),
            "srcdocs",
            "testdocs",
            "builddocs",
          ],
        ),
      "skipsdist": "true",
      "skip_install": "true",
      }
    )
}}

{{- ini_section(
      'testenv',
      true,
      {
        "skip_install": "true",
        "whitelist_externals": multiline_list(
          [
            maybe("autopep8" in cookiecutter.formatter, "autopep8"),
            maybe("black" in cookiecutter.formatter, "black"),
            maybe("pep8" in cookiecutter.linter, "pep8"),
            maybe("pylint" in cookiecutter.linter, "pylint"),
            maybe("flake8" in cookiecutter.linter, "flake8"),
            maybe("mypy" in cookiecutter.linter, "mypy"),
            maybe("bandit" in cookiecutter.linter, "bandit"),
            maybe("sphinx" in cookiecutter.docs, "sphinx-build"),
          ],
          indent=22
        ),
        "envdir": "{toxinidir}/.venv"
        "basepython": "python{}".format(cookiecutter.python_version)
        "list_dependencies_command": 'python -c "print({})"{{# remove pip freeze ugly output #}}'.format('-o-'),
        "deps": multiline_list(
          [
            "pip<=19.1.3,>=19.1.1{# pip 19.1 (2019-04-23) breaks editable installs with pyproject.toml #}",
          ],
        ),
        "commands": multiline_list(
          [
            "poetry install -vvv",
          ],
        ),
      }
    )
}}

{{- ini_section(
      'testenv:venv',
      true,
      {
        "recreate": "false",
        "description": '"Install basic dependencies for working application, without running tests"',
      }
    )
}}

{{- ini_section(
      'testenv:format',
      cookiecutter.formatter != "none",
      {
        "description": '"Reformat code using {} formatter(s)"'.format(cookiecutter.formatter),
        "commands": multiline_list(
          [
            maybe("autopep8" in cookiecutter.formatter, "autopep8 --in-place --recursive {}".format(cookiecutter.slug_name)),
            maybe("black" in cookiecutter.formatter, "black -q --target-version py36 {}".format(cookiecutter.slug_name)),
          ],
        ),
      }
    )
}}

{{- ini_section(
      'testenv:lint',
      cookiecutter.linter != "none",
      {
        "description": '"Lint code using {} linter(s)"'.format(cookiecutter.linter),
        "commands": multiline_list(
          [
            maybe(
              "flake8" in cookiecutter.linter,
              "flake8 --show-source --statistics --count {}".format(cookiecutter.slug_name)
            ),
            maybe(
              "pylint" in cookiecutter.linter,
              "pylint --rcfile={toxinidir}/tox.ini {}".format(cookiecutter.slug_name)
            ),
            maybe(
              "mypy" in cookiecutter.linter,
              "mypy --config-file {toxinidir}/tox.ini --python-version {} -p {}".format(cookiecutter.python_version, cookiecutter.slug_name)
            ),
            maybe(
              "bandit" in cookiecutter.linter,
              "bandit -q -r  {}".format(cookiecutter.slug_name)
            ),
          ],
        ),
      }
    )
}}

{{- maybe(
  cookiecutter.testing|lower != "none",
  {{- ini_section(
        'testenv:formattest',
        cookiecutter.formatter != "none",
        {
          "description": '"Reformat testing code using {} formatter(s)"'.format(cookiecutter.formatter),
          "commands": multiline_list(
            [
              maybe("autopep8" in cookiecutter.formatter, "autopep8 --in-place --recursive tests"),
              maybe("black" in cookiecutter.formatter, "black -q --target-version py36 tests"),
            ],
          ),
        }
      )
  }}
)
 -}}

{{- maybe(
  cookiecutter.testing|lower != "none",
  {{- ini_section(
        'testenv:lint',
        cookiecutter.linter != "none",
        {
          "description": '"Lint test using {} linter(s)"'.format(cookiecutter.linter),
          "commands": multiline_list(
            [
              maybe(
                "flake8" in cookiecutter.linter,
                "flake8 --show-source --statistics --count tests"
              ),
              maybe(
                "pylint" in cookiecutter.linter,
                "pylint --rcfile={toxinidir}/tox.ini --disable=C0111 tests"
              ),
              maybe(
                "mypy" in cookiecutter.linter,
                "mypy --config-file {toxinidir}/tox.ini --python-version {} -p tests".format(cookiecutter.python_version)
              ),
              maybe(
                "bandit" in cookiecutter.linter,
                "bandit -q --ini {toxinidir}/tox.ini skips=B101 -r tests"
              ),
            ],
          ),
        }
      )
  }}
)
 -}}

{{- maybe(
  cookiecutter.testing|lower != "none",
  {{- ini_section(
        'testenv:unit',
        cookiecutter.formatter != "none",
        {
          "description": '"Run unit tests"',
          "setenv": multiline_list(
            [
              "COVERAGE_FILE = .coverage.unit",
            ],
            indent=4
          ),
          "commands": multiline_list(
            [
              "pytest {{posargs}} -v --tb=short -ra --cov={} tests/unit".format(cookiecutter.slug_name)
            ],
          ),
        }
      )
  }}
)
 -}}



[testenv:integration]
description = "Run integration tests"
setenv =
  COVERAGE_FILE = .coverage.integration
commands =
{{- '\n  docker-compose up -d\n  ' if "docker-compose" in cookiecutter.docker else '\n  ' -}}
  pytest {posargs} -v --tb=short -ra --cov={{ cookiecutter.slug_name }} tests/integration
{{- '\n  docker-compose down' if "docker-compose" in cookiecutter.docker else '' -}}


{%- if "behave" in cookiecutter.testing -%}
{{ "\n\n\n[testenv:behave]" }}
description = "Run behavioral tests"
commands =
{%- if "behave" in cookiecutter.testing %}
  docker-compose up -d
{%- endif %}
  behave --show-timings tests/features
{%- if "behave" in cookiecutter.testing %}
  docker-compose down
{%- endif %}
{%- endif -%}
{{ "\n\n" }}
[testenv:coverage]
description = "Report Coverage results by aggregating tests results"
commands =
  coverage combine -a .coverage.unit .coverage.integration
  coverage html -d docs/build/coverage
{%- endif -%}{# cookiecutter.testing|lower != "none" #}

{%- if "sphinx" in cookiecutter.docs -%}
{{ "\n\n\n[testenv:srcdocs]"}}
description = "Invoke sphinx-apidoc to template the rst sources"
commands =
  sphinx-apidoc \
    --force \
    --ext-autodoc \
    --ext-doctest \
    --ext-intersphinx \
    --ext-todo \
    --ext-coverage \
    --ext-imgmath \
    --ext-mathjax \
    --ext-ifconfig \
    --ext-viewcode \
    --ext-githubpages \
    -e \
    -M \
    -o "{toxinidir}/docs/source/" "{toxinidir}/{{  cookiecutter.slug_name  }}"
  python -c "open('docs/source/{{  cookiecutter.slug_name  }}.rst','a').write('Coverage\n--------\n\n.. toctree::\n\nFollow this link to see Code coverage results\n`Coverage <coverage/index.html>`_.\n')"

[testenv:testdocs]
description = "Invoke doc8 to check the rst docs"
commands =
  doc8 -q "{toxinidir}/docs"


[testenv:builddocs]
description = "Invoke sphinx-build to build the HTML docs"
commands =
  sphinx-build \
    -q \
    -d "{toxinidir}/docs/build/.doctrees" \
    --color \
    -E \
    -a \
    -bhtml \
    "{toxinidir}/docs/source" \
    "{toxinidir}/docs/build"
{%- endif %}
